--------------------Copy Elision--------------------------
Mandatory Copy Elision:Derleyici kopyalama yerine default ctor cagirma garantisi var.
1)
#include <iostream>

struct A {
	A()
	{
		std::cout << "default ctor this = " << this << '\n';
	}

	A(const A&) = delete;
	A(A&&) = delete;
};

void func(A)
{

}

A foo()
{
	return A{};
}

int main()
{
	A ax = A{};  //mandatory copy elision
	func(A{});   //mandatory copy elision
	A ay = foo();  //mandatory copy elision
}

default ctor this = 0x7fffb43c856e
default ctor this = 0x7fffb43c856f
default ctor this = 0x7fffb43c856d

------------------------------------------------------------
2):Bu örnekte de copy elision dan faydalanarak int parametreli constructor cagirildi
#include <iostream>

struct A {
	A(int x)
	{
		std::cout << "A(int x) x = " << x << '\n';
	}

	A(const A&) = delete;
	A(A&&) = delete;
};

void func(A) { }

A foo()
{
	return A{ 3 }; //Return Value Optimization(RVO):mandatory
}

int main()
{
	A ax = A{ 1 }; //mandatory copy elision
	func(A{ 2 }); //mandatory copy elision
	A ay = foo(); //mandatory copy elision
}


A(int x) x = 1
A(int x) x = 2
A(int x) x = 3
-------------------------------------------------------------------
3)

#include <iostream>

class Nec {
public:
	Nec(const char*)
	{
		std::cout << "Nec(const char *)\n";
	}

	Nec(const Nec&)
	{
		std::cout << "copy ctor\n";
	}

	Nec(Nec&&)
	{
		std::cout << "move ctor\n";
	}
};


Nec foo()
{
	return "necati";
}

Nec bar()
{
	return foo();
}

int main()
{
	auto x = bar();  //Nec(const char *) ctor called
}
---------------------------------------------------------
4)
#include <iostream>


class Nec {
public:
	Nec() = default;
	Nec(int x) : mx{x}
	{
		std::cout << "Nec(int)\n";
	}
	void fold(int x)
	{
		mx *= x;
	}

	void print()const
	{
		std::cout << mx << '\n';
	}
private:
	int mx{};
};


Nec make_nec(int val)
{
	return Nec{ val };
}

Nec func()
{
	Nec x = make_nec(20);
	x.fold(10);
	return x;
}

int main()
{
	Nec mynec = func();

	mynec.print();
}

Nec(int)
200
------------------------------------------------------
NRVO(Named Return Value Optimization)

// named return value optimization
// it is not mandatory

#include <iostream>

class Nec {
public:
	Nec()
	{
		std::cout << "default ctor called\n";
	}

	Nec(const Nec&)
	{
		std::cout << "copy ctor\n";
	}

	Nec(Nec&&)
	{
		std::cout << "move ctor\n";
	}
};


Nec func()
{
	Nec x;
	//use x
	return x;
}

int main()
{
	Nec m{ func() }; //derleyiciye bağlı kimin cagirilacagi.
}
-------------------------------------------------------------------------
#include <iostream>

class Myclass {
public:
	Myclass()
	{
		std::cout << "default ctor called\n";
	}


	Myclass(const Myclass&)
	{
		std::cout << "copy ctor\n";
	}

	Myclass(Myclass&&)
	{
		std::cout << "move ctor\n";
	}
};


//no return value optimization
//multiple return statements

Myclass func(bool b)
{
	Myclass x, y;  //2 times default ctor called

	if (b)
		return x;

	return y;
}

int main()
{
	Myclass mx{ func(10 > 5) };  //move ctor called
	//Myclass my{ func(5 > 10)};
}
--------------------------------------


